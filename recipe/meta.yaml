{% set version = "2.1.1" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
{% set torch_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

package:
  name: torch-scatter
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/t/torch-scatter/torch_scatter-{{ version }}.tar.gz
  sha256: 59b6fad2c04f58b4ea46bb56e839edfd421faaa849d5e32ab1290975b9ef1656

build:
  number: 11
  rpaths:
    - lib/
  skip: true  # [linux and py<39 and cuda_compiler_version != "None"]
  rpaths:
  missing_dso_whitelist:
    - '*/libcuda.*'  # [linux64 or ppc64le]
  skip: true  # [win]

requirements:
  build:
    - {{ stdlib("c") }}
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}          # [cuda_compiler_version != "None"]
    - libcublas-dev                   # [build_platform != target_platform and (cuda_compiler_version or "None").startswith("12")]
    - libcufft-dev                    # [build_platform != target_platform and (cuda_compiler_version or "None").startswith("12")]
    - libcurand-dev                   # [build_platform != target_platform and (cuda_compiler_version or "None").startswith("12")]
    - libcusolver-dev                 # [build_platform != target_platform and (cuda_compiler_version or "None").startswith("12")]
    - libcusparse-dev                 # [build_platform != target_platform and (cuda_compiler_version or "None").startswith("12")]
  host:
    - cudnn                           # [cuda_compiler_version != "None"]
    - nccl                            # [cuda_compiler_version != "None"]
    - pip
    - pytest-runner
    - python
    - setuptools
    - pytorch
    - pytorch =*={{ torch_proc_type }}*
    - numpy
    - tqdm
    - scipy
    - networkx
    - scikit-learn
    - requests
    - pandas
    - rdflib
    - googledrivedownloader
    - jinja2
    - pyparsing
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - libcublas-dev                             # [(cuda_compiler_version or "None").startswith("12")]
    - libcufft-dev                              # [(cuda_compiler_version or "None").startswith("12")]
    - libcurand-dev                             # [(cuda_compiler_version or "None").startswith("12")]
    - libcusolver-dev                           # [(cuda_compiler_version or "None").startswith("12")]
    - libcusparse-dev                           # [(cuda_compiler_version or "None").startswith("12")]
  run:
    - python
    - {{ pin_compatible('cudnn') }}  # [cuda_compiler_version != "None"]
  run_constrained:
    # additional run constraint to the one from the (version-only) run_export;
    # constraining the CPU builds to CPU pytorch isn't 100% necessary, but cleaner
    - pytorch =*={{ torch_proc_type }}*

test:
  imports:
    - torch_scatter
    - torch_scatter.composite
  commands:
    - pip check
  requires:
    - pip

about:
  home: https://github.com/rusty1s/pytorch_scatter
  summary: PyTorch Extension Library of Optimized Scatter Operations
  license: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - sarthakpati
